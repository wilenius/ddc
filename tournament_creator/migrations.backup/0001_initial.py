# Generated by Django 5.1.5 on 2025-02-01 17:21

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Matchup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('round_number', models.IntegerField()),
                ('court_number', models.IntegerField()),
            ],
            options={
                'ordering': ['round_number', 'court_number'],
            },
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('ranking', models.IntegerField()),
            ],
            options={
                'ordering': ['ranking'],
            },
        ),
        migrations.CreateModel(
            name='TournamentArchetype',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='TournamentChart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Unnamed Tournament', max_length=255)),
                ('date', models.DateField()),
                ('number_of_rounds', models.IntegerField()),
                ('number_of_courts', models.IntegerField()),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('ADMIN', 'Administrator'), ('PLAYER', 'Player'), ('SPECTATOR', 'Spectator')], default='SPECTATOR', max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='MatchResultLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recorded_at', models.DateTimeField(auto_now_add=True)),
                ('action', models.CharField(choices=[('CREATE', 'Result Created'), ('UPDATE', 'Result Updated'), ('DELETE', 'Result Deleted')], max_length=20)),
                ('details', models.JSONField()),
                ('recorded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('matchup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament_creator.matchup')),
            ],
            options={
                'ordering': ['-recorded_at'],
            },
        ),
        migrations.AddField(
            model_name='matchup',
            name='pair1_player1',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pair1_player1_matchups', to='tournament_creator.player'),
        ),
        migrations.AddField(
            model_name='matchup',
            name='pair1_player2',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pair1_player2_matchups', to='tournament_creator.player'),
        ),
        migrations.AddField(
            model_name='matchup',
            name='pair2_player1',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pair2_player1_matchups', to='tournament_creator.player'),
        ),
        migrations.AddField(
            model_name='matchup',
            name='pair2_player2',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pair2_player2_matchups', to='tournament_creator.player'),
        ),
        migrations.CreateModel(
            name='KingOfTheCourt8Players',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('tournament_creator.tournamentarchetype',),
        ),
        migrations.AddField(
            model_name='matchup',
            name='tournament_chart',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matchups', to='tournament_creator.tournamentchart'),
        ),
        migrations.CreateModel(
            name='TournamentPlayer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament_creator.player')),
                ('tournament_chart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament_creator.tournamentchart')),
            ],
            options={
                'ordering': ['player__ranking'],
            },
        ),
        migrations.AddField(
            model_name='tournamentchart',
            name='players',
            field=models.ManyToManyField(through='tournament_creator.TournamentPlayer', to='tournament_creator.player'),
        ),
        migrations.CreateModel(
            name='MatchScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('set_number', models.IntegerField()),
                ('team1_score', models.IntegerField()),
                ('team2_score', models.IntegerField()),
                ('winning_team', models.IntegerField(choices=[(1, 'Team 1'), (2, 'Team 2')])),
                ('point_difference', models.IntegerField()),
                ('matchup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scores', to='tournament_creator.matchup')),
            ],
            options={
                'ordering': ['matchup', 'set_number'],
                'unique_together': {('matchup', 'set_number')},
            },
        ),
        migrations.CreateModel(
            name='PlayerScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wins', models.IntegerField(default=0)),
                ('matches_played', models.IntegerField(default=0)),
                ('total_point_difference', models.IntegerField(default=0)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament_creator.player')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament_creator.tournamentchart')),
            ],
            options={
                'ordering': ['-wins', '-total_point_difference'],
                'unique_together': {('tournament', 'player')},
            },
        ),
    ]
