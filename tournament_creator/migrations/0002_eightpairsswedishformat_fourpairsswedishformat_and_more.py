# Generated by Django 5.1.5 on 2025-10-02 04:22

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('tournament_creator', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='EightPairsSwedishFormat',
            fields=[
                ('tournamentarchetype_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tournament_creator.tournamentarchetype')),
            ],
            options={
                'abstract': False,
            },
            bases=('tournament_creator.tournamentarchetype',),
        ),
        migrations.CreateModel(
            name='FourPairsSwedishFormat',
            fields=[
                ('tournamentarchetype_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tournament_creator.tournamentarchetype')),
            ],
            options={
                'abstract': False,
            },
            bases=('tournament_creator.tournamentarchetype',),
        ),
        migrations.CreateModel(
            name='ManualTiebreakResolution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resolved_order', models.JSONField()),
                ('wins_tied_at', models.IntegerField()),
                ('reason', models.TextField(blank=True)),
                ('resolved_at', models.DateTimeField(auto_now_add=True)),
                ('resolved_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-resolved_at'],
            },
        ),
        migrations.CreateModel(
            name='MonarchOfTheCourt10',
            fields=[
                ('tournamentarchetype_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tournament_creator.tournamentarchetype')),
            ],
            options={
                'abstract': False,
            },
            bases=('tournament_creator.tournamentarchetype',),
        ),
        migrations.CreateModel(
            name='MonarchOfTheCourt11',
            fields=[
                ('tournamentarchetype_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tournament_creator.tournamentarchetype')),
            ],
            options={
                'abstract': False,
            },
            bases=('tournament_creator.tournamentarchetype',),
        ),
        migrations.CreateModel(
            name='MonarchOfTheCourt12',
            fields=[
                ('tournamentarchetype_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tournament_creator.tournamentarchetype')),
            ],
            options={
                'abstract': False,
            },
            bases=('tournament_creator.tournamentarchetype',),
        ),
        migrations.CreateModel(
            name='MonarchOfTheCourt13',
            fields=[
                ('tournamentarchetype_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tournament_creator.tournamentarchetype')),
            ],
            options={
                'abstract': False,
            },
            bases=('tournament_creator.tournamentarchetype',),
        ),
        migrations.CreateModel(
            name='MonarchOfTheCourt14',
            fields=[
                ('tournamentarchetype_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tournament_creator.tournamentarchetype')),
            ],
            options={
                'abstract': False,
            },
            bases=('tournament_creator.tournamentarchetype',),
        ),
        migrations.CreateModel(
            name='MonarchOfTheCourt15',
            fields=[
                ('tournamentarchetype_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tournament_creator.tournamentarchetype')),
            ],
            options={
                'abstract': False,
            },
            bases=('tournament_creator.tournamentarchetype',),
        ),
        migrations.CreateModel(
            name='MonarchOfTheCourt16',
            fields=[
                ('tournamentarchetype_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tournament_creator.tournamentarchetype')),
            ],
            options={
                'abstract': False,
            },
            bases=('tournament_creator.tournamentarchetype',),
        ),
        migrations.CreateModel(
            name='MonarchOfTheCourt5',
            fields=[
                ('tournamentarchetype_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tournament_creator.tournamentarchetype')),
            ],
            options={
                'abstract': False,
            },
            bases=('tournament_creator.tournamentarchetype',),
        ),
        migrations.CreateModel(
            name='MonarchOfTheCourt6',
            fields=[
                ('tournamentarchetype_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tournament_creator.tournamentarchetype')),
            ],
            options={
                'abstract': False,
            },
            bases=('tournament_creator.tournamentarchetype',),
        ),
        migrations.CreateModel(
            name='MonarchOfTheCourt7',
            fields=[
                ('tournamentarchetype_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tournament_creator.tournamentarchetype')),
            ],
            options={
                'abstract': False,
            },
            bases=('tournament_creator.tournamentarchetype',),
        ),
        migrations.CreateModel(
            name='MonarchOfTheCourt8',
            fields=[
                ('tournamentarchetype_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tournament_creator.tournamentarchetype')),
            ],
            options={
                'abstract': False,
            },
            bases=('tournament_creator.tournamentarchetype',),
        ),
        migrations.CreateModel(
            name='MonarchOfTheCourt9',
            fields=[
                ('tournamentarchetype_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tournament_creator.tournamentarchetype')),
            ],
            options={
                'abstract': False,
            },
            bases=('tournament_creator.tournamentarchetype',),
        ),
        migrations.CreateModel(
            name='NotificationBackendSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('backend_name', models.CharField(choices=[('email', 'Email'), ('signal', 'Signal'), ('matrix', 'Matrix')], max_length=50, unique=True)),
                ('is_active', models.BooleanField(default=False)),
                ('config', models.JSONField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='NotificationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('success', models.BooleanField()),
                ('details', models.TextField(blank=True)),
                ('backend_setting', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament_creator.notificationbackendsetting')),
                ('match_result_log', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tournament_creator.matchresultlog')),
            ],
        ),
        migrations.CreateModel(
            name='Pair',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ranking_points_sum', models.FloatField()),
                ('seed', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='RankingsUpdate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('division', models.CharField(default='O', max_length=10)),
                ('player_count', models.IntegerField(default=0)),
                ('successful', models.BooleanField(default=True)),
                ('error_message', models.TextField(blank=True)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Rankings Update',
                'verbose_name_plural': 'Rankings Updates',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='TournamentPair',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seed', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.DeleteModel(
            name='KingOfTheCourt8Players',
        ),
        migrations.AlterModelOptions(
            name='tournamentarchetype',
            options={'ordering': ['tournament_category', 'name']},
        ),
        migrations.AddField(
            model_name='player',
            name='ranking_points',
            field=models.FloatField(default=0),
        ),
        migrations.AddField(
            model_name='playerscore',
            name='automatic_wins',
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name='tournamentarchetype',
            name='tournament_category',
            field=models.CharField(choices=[('PAIRS', 'Pairs'), ('MOC', 'Monarch of the Court')], default='PAIRS', max_length=12),
        ),
        migrations.AddField(
            model_name='tournamentchart',
            name='notify_by_email',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='tournamentchart',
            name='notify_by_matrix',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='tournamentchart',
            name='notify_by_signal',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='matchup',
            name='pair1_player1',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pair1_player1_matchups', to='tournament_creator.player'),
        ),
        migrations.AlterField(
            model_name='matchup',
            name='pair1_player2',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pair1_player2_matchups', to='tournament_creator.player'),
        ),
        migrations.AlterField(
            model_name='matchup',
            name='pair2_player1',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pair2_player1_matchups', to='tournament_creator.player'),
        ),
        migrations.AlterField(
            model_name='matchup',
            name='pair2_player2',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pair2_player2_matchups', to='tournament_creator.player'),
        ),
        migrations.AlterField(
            model_name='tournamentchart',
            name='players',
            field=models.ManyToManyField(blank=True, through='tournament_creator.TournamentPlayer', to='tournament_creator.player'),
        ),
        migrations.AddField(
            model_name='manualtiebreakresolution',
            name='tied_players',
            field=models.ManyToManyField(to='tournament_creator.player'),
        ),
        migrations.AddField(
            model_name='manualtiebreakresolution',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament_creator.tournamentchart'),
        ),
        migrations.AddField(
            model_name='pair',
            name='player1',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pair_player1', to='tournament_creator.player'),
        ),
        migrations.AddField(
            model_name='pair',
            name='player2',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pair_player2', to='tournament_creator.player'),
        ),
        migrations.AddField(
            model_name='matchup',
            name='pair1',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='as_pair1', to='tournament_creator.pair'),
        ),
        migrations.AddField(
            model_name='matchup',
            name='pair2',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='as_pair2', to='tournament_creator.pair'),
        ),
        migrations.AddField(
            model_name='tournamentpair',
            name='pair',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament_creator.pair'),
        ),
        migrations.AddField(
            model_name='tournamentpair',
            name='tournament_chart',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament_creator.tournamentchart'),
        ),
        migrations.AddField(
            model_name='tournamentchart',
            name='pairs',
            field=models.ManyToManyField(blank=True, through='tournament_creator.TournamentPair', to='tournament_creator.pair'),
        ),
        migrations.AlterUniqueTogether(
            name='manualtiebreakresolution',
            unique_together={('tournament', 'wins_tied_at')},
        ),
    ]
